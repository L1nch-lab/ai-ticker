name: Health Monitoring

on:
  schedule:
    # Check every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests
    
    - name: Run Health Checks
      id: health
      run: |
        echo "🔍 Running comprehensive health checks..."
        
        # Check if all imports work
        python -c "
        import sys
        sys.path.append('.')
        
        try:
            # Test core imports
            import app
            import config
            import plugin_client
            print('✅ Core imports successful')
            
            # Test plugin imports
            from plugins.plugin_manager import PluginManager
            from plugins.registry import PluginRegistry
            from plugins.base_provider import BaseAIProvider
            print('✅ Plugin system imports successful')
            
            # Test built-in providers
            from plugins.builtin.openrouter_provider import OpenRouterProvider
            from plugins.builtin.together_provider import TogetherProvider
            from plugins.builtin.deepinfra_provider import DeepInfraProvider
            print('✅ Built-in provider imports successful')
            
            # Test plugin system initialization
            manager = PluginManager()
            registry = PluginRegistry()
            print('✅ Plugin system initialization successful')
            
            print('🎉 All health checks passed!')
            
        except Exception as e:
            print(f'❌ Health check failed: {e}')
            sys.exit(1)
        "
    
    - name: Check Dependencies
      run: |
        echo "📦 Checking dependency health..."
        
        # Check for known vulnerabilities
        pip install safety
        safety check --json --output safety_report.json || echo "⚠️ Vulnerability check completed"
        
        # Check for outdated packages
        pip list --outdated --format=json > outdated_packages.json
        
        python -c "
        import json
        
        # Check safety report
        try:
            with open('safety_report.json', 'r') as f:
                safety_data = json.load(f)
                if safety_data:
                    print(f'⚠️ Found {len(safety_data)} security vulnerabilities')
                    for vuln in safety_data[:3]:  # Show first 3
                        print(f'   - {vuln.get(\"package\", \"unknown\")}: {vuln.get(\"vulnerability\", \"\")}')
                else:
                    print('✅ No known vulnerabilities found')
        except:
            print('✅ No security issues detected')
        
        # Check outdated packages
        try:
            with open('outdated_packages.json', 'r') as f:
                outdated = json.load(f)
                if outdated:
                    print(f'📦 Found {len(outdated)} outdated packages')
                    for pkg in outdated[:5]:  # Show first 5
                        print(f'   - {pkg[\"name\"]}: {pkg[\"version\"]} -> {pkg[\"latest_version\"]}')
                else:
                    print('✅ All packages are up to date')
        except:
            print('✅ Package versions look good')
        "
    
    - name: Test Plugin System Performance
      run: |
        echo "⚡ Testing plugin system performance..."
        
        python -c "
        import time
        import sys
        sys.path.append('.')
        
        from plugin_client import PluginAwareAIClient
        
        # Test initialization time
        start_time = time.time()
        client = PluginAwareAIClient()
        init_time = time.time() - start_time
        
        print(f'🚀 Plugin client initialization: {init_time:.3f}s')
        
        # Test health check performance
        start_time = time.time()
        health_status = client.health_check_all()
        health_time = time.time() - start_time
        
        print(f'🏥 Health check time: {health_time:.3f}s')
        print(f'🔌 Available providers: {len(health_status) if health_status else 0}')
        
        # Performance warnings
        if init_time > 3.0:
            print('⚠️ WARNING: Slow initialization detected')
        if health_time > 5.0:
            print('⚠️ WARNING: Slow health checks detected')
        
        print('✅ Performance check completed')
        "
    
    - name: Generate Health Report
      run: |
        echo "📊 Generating health report..."
        
        python -c "
        import json
        import datetime
        import sys
        
        # Generate comprehensive health report
        report = {
            'timestamp': datetime.datetime.utcnow().isoformat(),
            'status': 'healthy',
            'checks': {
                'imports': 'passed',
                'plugin_system': 'passed',
                'dependencies': 'checked',
                'performance': 'acceptable'
            },
            'recommendations': [],
            'next_check': (datetime.datetime.utcnow() + datetime.timedelta(hours=4)).isoformat()
        }
        
        # Check if we have any issues to report
        issues = []
        
        # Check for outdated packages
        try:
            with open('outdated_packages.json', 'r') as f:
                outdated = json.load(f)
                if len(outdated) > 10:
                    issues.append('Many outdated packages detected')
                    report['recommendations'].append('Consider updating dependencies')
        except:
            pass
        
        # Check for security vulnerabilities
        try:
            with open('safety_report.json', 'r') as f:
                safety_data = json.load(f)
                if safety_data:
                    issues.append(f'{len(safety_data)} security vulnerabilities found')
                    report['recommendations'].append('Update vulnerable packages immediately')
                    report['status'] = 'warning'
        except:
            pass
        
        if not issues:
            report['recommendations'].append('System is healthy - no immediate actions needed')
        
        with open('health_report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        print('📋 Health report generated')
        print(f'Status: {report[\"status\"]}')
        if report['recommendations']:
            print('Recommendations:')
            for rec in report['recommendations']:
                print(f'  - {rec}')
        "
    
    - name: Upload Health Report
      uses: actions/upload-artifact@v4
      with:
        name: health-report
        path: |
          health_report.json
          safety_report.json
          outdated_packages.json
