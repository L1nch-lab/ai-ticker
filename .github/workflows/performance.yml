name: Performance Monitoring

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  checks: write

jobs:
  performance-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler psutil
    
    - name: Performance Benchmark Tests
      run: |
        echo "‚ö° Running performance benchmarks..."
        python -c "
        import time
        import psutil
        import sys
        sys.path.append('.')
        
        # Test plugin system performance
        from plugins.plugin_manager import PluginManager
        from plugin_client import PluginAwareAIClient
        
        # Measure plugin manager initialization time
        start_time = time.time()
        manager = PluginManager()
        init_time = time.time() - start_time
        
        print(f'üöÄ Plugin Manager init time: {init_time:.3f}s')
        
        # Measure memory usage
        process = psutil.Process()
        memory_mb = process.memory_info().rss / 1024 / 1024
        print(f'üíæ Memory usage: {memory_mb:.1f} MB')
        
        # Performance thresholds
        if init_time > 2.0:
            print('‚ö†Ô∏è WARNING: Plugin initialization is slow')
            
        if memory_mb > 200:
            print('‚ö†Ô∏è WARNING: High memory usage detected')
            
        print('‚úÖ Performance check completed')
        "
    
    - name: Load Test Simulation
      run: |
        echo "üîÑ Running load test simulation..."
        python -c "
        import time
        import concurrent.futures
        import sys
        sys.path.append('.')
        
        from plugin_client import PluginAwareAIClient
        
        def test_request():
            try:
                client = PluginAwareAIClient()
                # Simulate health check
                result = client.health_check_all()
                return len(result) if result else 0
            except Exception as e:
                return 0
        
        # Concurrent requests simulation
        start_time = time.time()
        with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(test_request) for _ in range(50)]
            results = [f.result() for f in concurrent.futures.as_completed(futures)]
        
        total_time = time.time() - start_time
        successful_requests = sum(1 for r in results if r > 0)
        
        print(f'üìä Load Test Results:')
        print(f'   Total requests: 50')
        print(f'   Successful: {successful_requests}')
        print(f'   Total time: {total_time:.2f}s')
        print(f'   Avg response time: {total_time/50:.3f}s')
        
        if total_time > 30:
            print('‚ö†Ô∏è WARNING: Load test took too long')
        else:
            print('‚úÖ Load test passed')
        "
    
    - name: Generate Performance Report
      run: |
        echo "üìà Generating performance report..."
        python -c "
        import json
        import datetime
        import platform
        import sys
        
        report = {
            'timestamp': datetime.datetime.utcnow().isoformat(),
            'platform': platform.platform(),
            'python_version': sys.version,
            'test_status': 'completed',
            'recommendations': [
                'Monitor plugin initialization time',
                'Watch memory usage patterns',
                'Consider caching for frequently used providers'
            ]
        }
        
        with open('performance-report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        print('üìã Performance report generated')
        "
    
    - name: Upload Performance Report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.json
