name: Automated Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Release version: $VERSION"
    
    - name: Validate release
      run: |
        echo "‚úÖ Validating release ${{ steps.version.outputs.version }}..."
        
        # Run full test suite
        pytest tests/ -v
        
        # Security scan
        pip install bandit
        bandit -r . -ll
        
        # Check if CHANGELOG.md is updated
        if ! grep -q "${{ steps.version.outputs.version }}" CHANGELOG.md; then
          echo "‚ùå Version ${{ steps.version.outputs.version }} not found in CHANGELOG.md"
          exit 1
        fi
        
        echo "‚úÖ Release validation passed"
    
    - name: Build Docker image
      run: |
        echo "üê≥ Building Docker image..."
        docker build -t ai-ticker:${{ steps.version.outputs.version }} .
        docker build -t ai-ticker:latest .
    
    - name: Generate Release Notes
      id: release_notes
      run: |
        echo "üìù Generating release notes..."
        
        # Extract changelog section for this version
        python -c "
        import re
        
        with open('CHANGELOG.md', 'r') as f:
            content = f.read()
        
        # Extract section for current version
        version = '${{ steps.version.outputs.version }}'
        pattern = f'## \[{version}\].*?(?=## \[|\Z)'
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            release_notes = match.group(0).strip()
            # Remove the version header
            release_notes = re.sub(f'## \[{version}\].*?\n', '', release_notes)
            release_notes = release_notes.strip()
        else:
            release_notes = f'Release {version}'
        
        # Save to file (GitHub Actions can't handle multiline outputs well)
        with open('release_notes.md', 'w') as f:
            f.write(release_notes)
        "
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: AI-Ticker v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push Docker images
      run: |
        echo "üöÄ Pushing Docker images..."
        
        # Tag for GitHub Container Registry
        docker tag ai-ticker:${{ steps.version.outputs.version }} ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
        docker tag ai-ticker:latest ghcr.io/${{ github.repository }}:latest
        
        # Push to registry
        docker push ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
        docker push ghcr.io/${{ github.repository }}:latest
        
        echo "‚úÖ Docker images published"
    
    - name: Create deployment archive
      run: |
        echo "üì¶ Creating deployment archive..."
        
        # Create deployment package
        mkdir -p deploy
        cp -r . deploy/ai-ticker-${{ steps.version.outputs.version }}
        cd deploy
        
        # Remove unnecessary files
        rm -rf ai-ticker-${{ steps.version.outputs.version }}/.git
        rm -rf ai-ticker-${{ steps.version.outputs.version }}/.github
        rm -rf ai-ticker-${{ steps.version.outputs.version }}/tests
        rm -rf ai-ticker-${{ steps.version.outputs.version }}/__pycache__
        
        # Create archive
        tar -czf ai-ticker-${{ steps.version.outputs.version }}.tar.gz ai-ticker-${{ steps.version.outputs.version }}
        
        echo "‚úÖ Deployment archive created"
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: deploy/ai-ticker-${{ steps.version.outputs.version }}.tar.gz
        asset_name: ai-ticker-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip
